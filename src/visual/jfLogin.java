/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jfImpressosAgendamento.java
 *
 * Created on 03/03/2010, 20:23:35
 */
package visual;

import controlador.ControleImagem;
import controlador.ControleVersao;
import controlador.EncriptaSenha;
import controlador.ValidaData;
import dao.DAO;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import modelo.Contrasenha;
import modelo.Usuario;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author luizam
 */
public class jfLogin extends javax.swing.JFrame {

    private static ControleVersao versao = new ControleVersao();
    private DAO dao;
    private jfPrincipal jfPrinc;
    private Usuario usuario;
    private ControleImagem controleImagem = new ControleImagem();
    private ValidaData validaData;
    private JasperPrint jPrint;
    private JasperViewer jViewer;
    private String tipoStatus;
    private boolean avancar;//para avançar para tela principal

    /**
     * Creates new form jfImpressosAgendamento
     */
    public jfLogin() {
        super("Login CADUN - " + versao.getVersao() + " - " + versao.getAno());
        initComponents();

        this.setResizable(false);

        //Altera icone na barra de titulo
        Toolkit kit = Toolkit.getDefaultToolkit();
        Image img = kit.getImage(controleImagem.getIconeImagem());
        this.setIconImage(img);

        //centraliza tela
        setSize(getWidth(), getHeight());
        setLocationRelativeTo(null);
        setVisible(true);

        setTemaWindows();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpLogin = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jpswdSenha = new javax.swing.JPasswordField();
        jtfUsuario = new javax.swing.JTextField();
        jpBotoes = new javax.swing.JPanel();
        jbEntrar = new javax.swing.JButton();
        jbLimpar = new javax.swing.JButton();
        jbFechar = new javax.swing.JButton();
        jmbLogin = new javax.swing.JMenuBar();
        jmArquivo = new javax.swing.JMenu();
        jmiCriarBackup = new javax.swing.JMenuItem();
        jmRestaurarBackup = new javax.swing.JMenu();
        jmiDeletaCriaTabelas = new javax.swing.JMenuItem();
        jmiRestaurarBackup2 = new javax.swing.JMenuItem();
        jmAjuda = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jmiTutorialUtilizacaoSistema = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpLogin.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Usuário: ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Senha: ");

        jpswdSenha.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jpswdSenha.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jpswdSenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jpswdSenhaKeyPressed(evt);
            }
        });

        jtfUsuario.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfUsuario.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtfUsuario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfUsuarioFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jpLoginLayout = new javax.swing.GroupLayout(jpLogin);
        jpLogin.setLayout(jpLoginLayout);
        jpLoginLayout.setHorizontalGroup(
            jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLoginLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jpswdSenha)
                    .addComponent(jtfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpLoginLayout.setVerticalGroup(
            jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLoginLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jpswdSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jpBotoes.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());

        jbEntrar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbEntrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/entrar.png"))); // NOI18N
        jbEntrar.setText("Entrar");
        jbEntrar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbEntrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEntrarActionPerformed(evt);
            }
        });

        jbLimpar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/limpar.png"))); // NOI18N
        jbLimpar.setText("Limpar");
        jbLimpar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimparActionPerformed(evt);
            }
        });

        jbFechar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbFechar.setText("Fechar");
        jbFechar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFecharActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpBotoesLayout = new javax.swing.GroupLayout(jpBotoes);
        jpBotoes.setLayout(jpBotoesLayout);
        jpBotoesLayout.setHorizontalGroup(
            jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBotoesLayout.createSequentialGroup()
                .addContainerGap(159, Short.MAX_VALUE)
                .addComponent(jbEntrar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jpBotoesLayout.setVerticalGroup(
            jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbEntrar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jmArquivo.setText("Arquivo");

        jmiCriarBackup.setText("Criar Backup");
        jmiCriarBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCriarBackupActionPerformed(evt);
            }
        });
        jmArquivo.add(jmiCriarBackup);

        jmRestaurarBackup.setText("Restauração");
        jmRestaurarBackup.setEnabled(false);

        jmiDeletaCriaTabelas.setText("1º Deletar e Recriar Tabelas");
        jmiDeletaCriaTabelas.setToolTipText("1º passo - Deletar e Recriar Tabelas");
        jmiDeletaCriaTabelas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDeletaCriaTabelasActionPerformed(evt);
            }
        });
        jmRestaurarBackup.add(jmiDeletaCriaTabelas);

        jmiRestaurarBackup2.setText("2º Restaurar Backup");
        jmiRestaurarBackup2.setToolTipText("2º passo - Restaurar o Backup");
        jmiRestaurarBackup2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiRestaurarBackup2ActionPerformed(evt);
            }
        });
        jmRestaurarBackup.add(jmiRestaurarBackup2);

        jmArquivo.add(jmRestaurarBackup);

        jmbLogin.add(jmArquivo);

        jmAjuda.setText("Ajuda");

        jMenuItem1.setText("Manual de Backup e Restauração usando PostgreSQL 9.1");
        jmAjuda.add(jMenuItem1);

        jmiTutorialUtilizacaoSistema.setText("Tutorial de Utilização do Sistema");
        jmiTutorialUtilizacaoSistema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiTutorialUtilizacaoSistemaActionPerformed(evt);
            }
        });
        jmAjuda.add(jmiTutorialUtilizacaoSistema);

        jmbLogin.add(jmAjuda);

        setJMenuBar(jmbLogin);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jpLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimparActionPerformed

        limparCampos();

    }//GEN-LAST:event_jbLimparActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        fechar();
    }//GEN-LAST:event_formWindowClosing

    private void jbEntrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEntrarActionPerformed
        entrar();
}//GEN-LAST:event_jbEntrarActionPerformed

    private void jbFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFecharActionPerformed
        fechar();
    }//GEN-LAST:event_jbFecharActionPerformed

    private void jpswdSenhaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jpswdSenhaKeyPressed
        int keycode = evt.getKeyCode();

        if (evt.getID() == KeyEvent.KEY_PRESSED) {
            if (keycode == KeyEvent.VK_ENTER) {
                entrar();
            }
        }
    }//GEN-LAST:event_jpswdSenhaKeyPressed

    private void jtfUsuarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfUsuarioFocusLost
        jtfUsuario.setText(jtfUsuario.getText().toUpperCase());
    }//GEN-LAST:event_jtfUsuarioFocusLost

    private void jmiCriarBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCriarBackupActionPerformed
        criarBackup();
    }//GEN-LAST:event_jmiCriarBackupActionPerformed

    private void jmiDeletaCriaTabelasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDeletaCriaTabelasActionPerformed
        deletaBaseDados();
        recriaBaseDados();
    }//GEN-LAST:event_jmiDeletaCriaTabelasActionPerformed

    private void jmiRestaurarBackup2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiRestaurarBackup2ActionPerformed
        restaurarBackup();
    }//GEN-LAST:event_jmiRestaurarBackup2ActionPerformed

    private void jmiTutorialUtilizacaoSistemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiTutorialUtilizacaoSistemaActionPerformed
        
        try {
            Desktop desktop = Desktop.getDesktop();
            desktop.open(new File(this.getClass().getResource("DocumentosAjuda/Tutorial_de_Utilizacao_do_Sistema_Cadun_001.pdf").getFile()));
        } catch (IOException iOException) {
            iOException.getMessage();
        }
        
    }//GEN-LAST:event_jmiTutorialUtilizacaoSistemaActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jfLogin().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JButton jbEntrar;
    private javax.swing.JButton jbFechar;
    private javax.swing.JButton jbLimpar;
    private javax.swing.JMenu jmAjuda;
    private javax.swing.JMenu jmArquivo;
    private javax.swing.JMenu jmRestaurarBackup;
    private javax.swing.JMenuBar jmbLogin;
    private javax.swing.JMenuItem jmiCriarBackup;
    private javax.swing.JMenuItem jmiDeletaCriaTabelas;
    private javax.swing.JMenuItem jmiRestaurarBackup2;
    private javax.swing.JMenuItem jmiTutorialUtilizacaoSistema;
    private javax.swing.JPanel jpBotoes;
    private javax.swing.JPanel jpLogin;
    private javax.swing.JPasswordField jpswdSenha;
    private javax.swing.JTextField jtfUsuario;
    // End of variables declaration//GEN-END:variables

//Outros Metodos ===========================================================================================================================================
    public void fechar() {

        dao = null;
        this.dispose();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

    }

    public void limparCampos() {

        jtfUsuario.setText("");
        jpswdSenha.setText("");

    }

    public void criarBackup() {

        try {

            String nomeOs = System.getProperty("os.name");
            String data = getDataParaBackup();

            /*ProcessBuilder processBd = new ProcessBuilder("bkp.bat");
             Map<String, String> env = processBd.environment();
            
             env.put("set", "pguser=postgres");
             env.put("set", "pgpassword=Semed.10");
             env.put("set", "pgpath=c:\\Program Files\\PostgreSql\\9.1");
             env.put("set", "path=%path%; %pgpath%\bin");
            
             File bkp = new File("C:\\Cadun\\bkp");
            
             processBd.directory(new File("C:\\Cadun"));
             processBd.redirectErrorStream(true);
             processBd.redirectOutput(Redirect.appendTo(bkp));
             Process p = processBd.start();
            
             assert processBd.redirectInput() == Redirect.PIPE;
             assert processBd.redirectOutput().file() == bkp;
             assert p.getInputStream().read() == -1;*/

            //Runtime.getRuntime().exec("@echo off");
            //Runtime.getRuntime().exec("set pguser=postgres");
            //Runtime.getRuntime().exec("set pgpassword=Semed.10");
            //Runtime.getRuntime().exec("set pgpath=c:\\Program Files\\PostgreSql 9.1");
            //Runtime.getRuntime().exec("set path=%path%; %pgpath%\bin");

            if (nomeOs.equals("Windows XP")) {
                //Runtime.getRuntime().exec("pg_dump --host localhost --port 5432 --username postgres --no-password  --format custom --blobs --verbose --file C:\\Docume~1\\" + System.getProperty("user.name") + "\\Desktop\\BKP_CMEI_" + data + ".backup semedcadun");
                Runtime.getRuntime().exec("pg_dump --host semed-infosrv01 --port 5432 --username postgres --no-password  --format custom --blobs --verbose --file C:\\Docume~1\\" + System.getProperty("user.name") + "\\Desktop\\BKP_CMEI_" + data + ".backup semedcadun");
            } else if (nomeOs.equals("Windows 7")) {
                //Runtime.getRuntime().exec("pg_dump --host localhost --port 5432 --username postgres --no-password  --format custom --blobs --verbose --file C:\\Users\\" + System.getProperty("user.name") + "\\Desktop\\BKP_CMEI_" + data + ".backup semedcadun");
                Runtime.getRuntime().exec("pg_dump --host semed-infosrv01 --port 5432 --username postgres --no-password  --format custom --blobs --verbose --file D:\\Desktop\\BKP_CMEI_" + data + ".backup semedcadun");
            } else {
                //Runtime.getRuntime().exec("pg_dump --host localhost --port 5432 --username postgres --no-password  --format custom --blobs --verbose --file \\home\\" + System.getProperty("user.name") + "\\Desktop\\BKP_CMEI_" + data + ".backup semedcadun");
                Runtime.getRuntime().exec("pg_dump --host semed-infosrv01 --port 5432 --username postgres --no-password  --format custom --blobs --verbose --file \\home\\" + System.getProperty("user.name") + "\\Desktop\\BKP_CMEI_" + data + ".backup semedcadun");
            }
            
            JOptionPane.showMessageDialog(null, "Backup realizado com sucesso! \n Para que não haja erros, o programa será fechado!", "Info", JOptionPane.INFORMATION_MESSAGE, null);
            fechar();
            
            //Process processo = Runtime.getRuntime().exec("C:\\Cadun\\bkp.bat");
            //Process processo = Runtime.getRuntime().exec("MapearAgendamento.bat");
        } catch (IOException ex) {
            //Logger.getLogger(jfSobre.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(null, "Não foi possível criar o Backup!", "Erro", JOptionPane.ERROR_MESSAGE, null);
        }

    }
    
    public void deletaBaseDados() {
        
        try {
            Runtime.getRuntime().exec("dropdb -U postgres semedcadun");
            JOptionPane.showMessageDialog(null, "As Tabelas foram deletadas com sucesso!", "Info", JOptionPane.INFORMATION_MESSAGE, null);
        } catch (IOException ex) {
            Logger.getLogger(jfLogin.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Não foi possível Criar Tabelas!", "Erro DropDB", JOptionPane.ERROR_MESSAGE, null);
        }
        
    }

    public void recriaBaseDados() {
        
        try {
            Runtime.getRuntime().exec("createdb -U postgres semedcadun");
            JOptionPane.showMessageDialog(null, "As Tabelas foram criadas com sucesso!", "Info", JOptionPane.INFORMATION_MESSAGE, null);
        } catch (IOException ex) {
            Logger.getLogger(jfLogin.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Não foi possível Criar Tabelas!", "Erro CreateDB", JOptionPane.ERROR_MESSAGE, null);
        }
        
    }
    
    public void restaurarBackup() {

        JFileChooser fc = new JFileChooser();
        int opcao = fc.showOpenDialog(this);
        if (opcao == JFileChooser.APPROVE_OPTION) {
            System.out.println("Arquivo selecionado: " + fc.getSelectedFile().getName());
        }

        try {

            String nomeOs = System.getProperty("os.name");
            String data = getDataParaBackup();

            if (nomeOs.equals("Windows XP")) {
                Runtime.getRuntime().exec("pg_restore -h localhost -U postgres -vOx --role=postgres -j=4 -d semedcadun " + fc.getSelectedFile().getPath());
                //Runtime.getRuntime().exec("pg_restore -h semed-infosrv01 -U postgres -vOx --role=postgres -j=4 -d semedcadun " + fc.getSelectedFile().getPath());
            } else if (nomeOs.equals("Windows 7")) {
                Runtime.getRuntime().exec("pg_restore -h localhost -U postgres -p 5432 -vOx --role postgres -j=4 -d semedcadun " + fc.getSelectedFile().getPath());
                //Runtime.getRuntime().exec("pg_restore -h semed-infosrv01 -U postgres -p 5432 -vOx --role postgres -j=4 -d semedcadun " + fc.getSelectedFile().getPath());
                
                //Runtime.getRuntime().exec("pg_restore --host localhost --port 5432 --username postgres --dbname semedinfoedu --no-password  --verbose semedcadun " + fc.getSelectedFile().getPath());
                System.out.println("Caminho: " + fc.getSelectedFile().getPath());
            } else {
                Runtime.getRuntime().exec("pg_restore -h localhost -U postgres -vOx --role=postgres -j=4 -d semedcadun " + fc.getSelectedFile().getPath());
                //Runtime.getRuntime().exec("pg_restore -h semed-infosrv01 -U postgres -vOx --role=postgres -j=4 -d semedcadun " + fc.getSelectedFile().getPath());
            }
            
            JOptionPane.showMessageDialog(null, "Backup restaurado com sucesso! \n Para que não haja erros, o programa será fechado!", "Info", JOptionPane.INFORMATION_MESSAGE, null);
            fechar();

            //Process processo = Runtime.getRuntime().exec("C:\\Cadun\\bkp.bat");
            //Process processo = Runtime.getRuntime().exec("MapearAgendamento.bat");
        } catch (IOException ex) {
            //Logger.getLogger(jfSobre.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(null, "Não foi possível restaurar o Backup!", "Erro", JOptionPane.ERROR_MESSAGE, null);
        }

    }

//Geradores, Validadores===========================================================================================================================================
    public void verificaVersao() {

        if (System.getProperty("os.name").contains("Windows")) {

            versao.setCodigoUsuario(usuario.getCodigoUsuario());

            avancar = versao.comparaVersao();

        }

    }

    public void iniciaDao() {

        if (dao == null) {
            dao = new DAO();
        }

    }

    public void iniciaUsuario() {

        if (usuario == null) {
            usuario = new Usuario();
        }

    }

    public void iniciaValidaData() {

        if (validaData == null) {
            validaData = new ValidaData();
        }

    }

//Getters and Setters===========================================================================================================================================
    public String getDataParaBackup() {

        iniciaValidaData();
        String dia;
        String mes;
        String ano;

        Date dataBkp = validaData.getDateAtual();

        dia = String.valueOf(dataBkp.getDate());
        mes = String.valueOf(dataBkp.getMonth() + 1);
        ano = String.valueOf(dataBkp.getYear() + 1900);

        return dia + "-" + mes + "-" + ano;

    }
    
    public void setTemaWindows() {
        
        //Visual estilo Windows
        UIManager.LookAndFeelInfo[] laf = UIManager.getInstalledLookAndFeels();
        for (int i = 0; i < laf.length; i++) {
            System.out.println(laf[i].getName());
            if (laf[i].getName().equals("Windows")) {
                try {
                    UIManager.setLookAndFeel(laf[i].getClassName());
                    SwingUtilities.updateComponentTreeUI(this);
                } catch (Exception e) {
                }
            }
            if (laf[i].getName().equals("GTK+")) {
                try {
                    UIManager.setLookAndFeel(laf[i].getClassName());
                    SwingUtilities.updateComponentTreeUI(this);
                } catch (Exception e) {
                }
            }
        }

    }
//Metodos DAO===========================================================================================================================================

    public void entrar() {

        if (!jtfUsuario.getText().isEmpty() && !jpswdSenha.getText().isEmpty()) {

            iniciaDao();
            iniciaUsuario();
            Contrasenha ctrSenha = new Contrasenha();
            EncriptaSenha criptaSenha = new EncriptaSenha();
            String nome;

            nome = (String) jtfUsuario.getText();

            try {
                usuario = (Usuario) dao.buscaUsuarioLogin(nome);


                if (usuario.getNomeUsuario().equals(nome) && usuario.getSenha().equals(criptaSenha.ResumirTexto(jpswdSenha.getText()))) {

                    verificaVersao();

                    if (avancar == false) {
                        JOptionPane.showMessageDialog(this, "O Sistema possui uma versão nova, pode instala-la executando\n o aplicativo AtualizacaoCadun, que está na pasta Cadun de seu pendrive!", "Atenção", JOptionPane.WARNING_MESSAGE, null);
                    }

                    if (jfPrinc == null) {
                        jfPrinc = new jfPrincipal();
                    }

                    jfPrinc.setTipoCadastroUsuario(usuario.getTipoCadastro());
                    jfPrinc.setTemaEscolhido(usuario.getTemaEscolhido());
                    jfPrinc.setNomeUsuario(usuario.getNomeUsuario());
                    jfPrinc.setVisible(true);

                    fechar();

                } else {
                    JOptionPane.showMessageDialog(this, "Preencha corretamente os campos de usuário e senha!", "Atenção", JOptionPane.WARNING_MESSAGE, null);
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro com a Base de Dados, não foi possivel localizar \n ou não existe a base semedcadun!", "Erro", JOptionPane.ERROR_MESSAGE, null);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Preencha corretamente os campos de usuário e senha!", "Atenção", JOptionPane.WARNING_MESSAGE, null);
        }

    }
}
